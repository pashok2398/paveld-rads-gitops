# platform/resource-graph-definitions/webapp-rgd.yaml (CORRECTED FINAL)
apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: webapp
spec:
  schema:
    apiVersion: v1alpha1
    kind: WebApp
    spec:
      name: string | required=true description="Application name"
      image: string | required=true description="Container image"
      replicas: integer | default=1 minimum=1 maximum=10 description="Number of replicas"
      port: integer | default=8080 description="Container port"
      resources:
        requests:
          cpu: string | default="100m" description="CPU request"
          memory: string | default="128Mi" description="Memory request"
        limits:
          cpu: string | default="500m" description="CPU limit"
          memory: string | default="512Mi" description="Memory limit"
      ingress:
        enabled: boolean | default=false description="Enable ingress"
        host: string | default="app.local" description="Ingress hostname"
        path: string | default="/" description="Ingress path"
        ingressClass: string | default="nginx" description="Ingress class"
    status:
      availableReplicas: ${deployment.status.availableReplicas}
      readyReplicas: ${deployment.status.readyReplicas}

  resources:
  - id: deployment
    template:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${schema.spec.name}
      spec:
        replicas: ${schema.spec.replicas}
        selector:
          matchLabels:
            app: ${schema.spec.name}
        template:
          metadata:
            labels:
              app: ${schema.spec.name}
          spec:
            containers:
            - name: ${schema.spec.name}
              image: ${schema.spec.image}
              ports:
              - containerPort: ${schema.spec.port}
                name: http
              resources:
                requests:
                  cpu: ${schema.spec.resources.requests.cpu}
                  memory: ${schema.spec.resources.requests.memory}
                limits:
                  cpu: ${schema.spec.resources.limits.cpu}
                  memory: ${schema.spec.resources.limits.memory}
              env:
              - name: PORT
                value: "${schema.spec.port}"

  - id: service
    template:
      apiVersion: v1
      kind: Service
      metadata:
        name: ${schema.spec.name}-service
      spec:
        selector: ${deployment.spec.selector.matchLabels}
        ports:
        - port: 80
          targetPort: ${schema.spec.port}
          name: http
        type: ClusterIP

  - id: ingress
    includeWhen:
    - ${schema.spec.ingress.enabled}
    template:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: ${schema.spec.name}-ingress
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
          kubernetes.io/ingress.class: ${schema.spec.ingress.ingressClass}
      spec:
        ingressClassName: ${schema.spec.ingress.ingressClass}
        rules:
        - host: ${schema.spec.ingress.host}
          http:
            paths:
            - path: ${schema.spec.ingress.path}
              pathType: Prefix
              backend:
                service:
                  name: ${service.metadata.name}
                  port:
                    number: 80